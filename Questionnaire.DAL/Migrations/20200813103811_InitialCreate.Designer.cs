// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Questionnaire.Data.Domain;

namespace Questionnaire.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200813103811_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Questionnaire.Data.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Questionnaire.Data.Entities.DataType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnumDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DataTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "string"
                        },
                        new
                        {
                            Id = 2,
                            Type = "int"
                        },
                        new
                        {
                            Id = 3,
                            EnumDescription = "Мужской***женский",
                            Type = "enum"
                        },
                        new
                        {
                            Id = 4,
                            Type = "date"
                        },
                        new
                        {
                            Id = 5,
                            EnumDescription = "Женат/замужем***Разведен(-а)***Холост(-ая)",
                            Type = "enum"
                        },
                        new
                        {
                            Id = 6,
                            Type = "bool"
                        });
                });

            modelBuilder.Entity("Questionnaire.Data.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerTypeId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnswerTypeId = 1,
                            QuestionDescription = "Введите имя"
                        },
                        new
                        {
                            Id = 2,
                            AnswerTypeId = 2,
                            QuestionDescription = "Введите возраст"
                        },
                        new
                        {
                            Id = 3,
                            AnswerTypeId = 3,
                            QuestionDescription = "Выберите пол"
                        },
                        new
                        {
                            Id = 4,
                            AnswerTypeId = 4,
                            QuestionDescription = "Введите дату рождения"
                        },
                        new
                        {
                            Id = 5,
                            AnswerTypeId = 5,
                            QuestionDescription = "Выберите семейное положение"
                        },
                        new
                        {
                            Id = 6,
                            AnswerTypeId = 6,
                            QuestionDescription = "Любите ли вы программировать?"
                        });
                });

            modelBuilder.Entity("Questionnaire.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Questionnaire.Data.Entities.Answer", b =>
                {
                    b.HasOne("Questionnaire.Data.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Questionnaire.Data.Entities.User", "User")
                        .WithMany("Answers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Questionnaire.Data.Entities.Question", b =>
                {
                    b.HasOne("Questionnaire.Data.Entities.DataType", "AnswerType")
                        .WithMany()
                        .HasForeignKey("AnswerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
